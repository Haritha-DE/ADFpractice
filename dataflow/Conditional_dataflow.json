{
	"name": "Conditional_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EmployeeDelimitedText1",
						"type": "DatasetReference"
					},
					"name": "empsource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputdelimitedtxt",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "outputdelimitedtxt",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "outputdelimitedtxt",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empsource",
				"empsource split(equals(department,'1'),",
				"     equals(department,'2'),",
				"     equals(department,'3'),",
				"     disjoint: false) ~> split1@(ITEmployees, HREmployees, PayrollEmployees)",
				"split1@ITEmployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['IT_Employees'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"split1@HREmployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['HR_Employees'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"split1@PayrollEmployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Payroll_Employees'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink3"
			]
		}
	}
}